// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/receiver.proto

package simulator

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Receiver service

func NewReceiverEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Receiver service

type ReceiverService interface {
	SetReceiverNum(ctx context.Context, in *SetReceiverNumRequest, opts ...client.CallOption) (*SetReceiverNumResponse, error)
	Recv(ctx context.Context, in *RecvRequest, opts ...client.CallOption) (*RecvResponse, error)
}

type receiverService struct {
	c    client.Client
	name string
}

func NewReceiverService(name string, c client.Client) ReceiverService {
	return &receiverService{
		c:    c,
		name: name,
	}
}

func (c *receiverService) SetReceiverNum(ctx context.Context, in *SetReceiverNumRequest, opts ...client.CallOption) (*SetReceiverNumResponse, error) {
	req := c.c.NewRequest(c.name, "Receiver.SetReceiverNum", in)
	out := new(SetReceiverNumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverService) Recv(ctx context.Context, in *RecvRequest, opts ...client.CallOption) (*RecvResponse, error) {
	req := c.c.NewRequest(c.name, "Receiver.Recv", in)
	out := new(RecvResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Receiver service

type ReceiverHandler interface {
	SetReceiverNum(context.Context, *SetReceiverNumRequest, *SetReceiverNumResponse) error
	Recv(context.Context, *RecvRequest, *RecvResponse) error
}

func RegisterReceiverHandler(s server.Server, hdlr ReceiverHandler, opts ...server.HandlerOption) error {
	type receiver interface {
		SetReceiverNum(ctx context.Context, in *SetReceiverNumRequest, out *SetReceiverNumResponse) error
		Recv(ctx context.Context, in *RecvRequest, out *RecvResponse) error
	}
	type Receiver struct {
		receiver
	}
	h := &receiverHandler{hdlr}
	return s.Handle(s.NewHandler(&Receiver{h}, opts...))
}

type receiverHandler struct {
	ReceiverHandler
}

func (h *receiverHandler) SetReceiverNum(ctx context.Context, in *SetReceiverNumRequest, out *SetReceiverNumResponse) error {
	return h.ReceiverHandler.SetReceiverNum(ctx, in, out)
}

func (h *receiverHandler) Recv(ctx context.Context, in *RecvRequest, out *RecvResponse) error {
	return h.ReceiverHandler.Recv(ctx, in, out)
}
