// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sender.proto

package simulator

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Sender service

func NewSenderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Sender service

type SenderService interface {
	SetSenderNum(ctx context.Context, in *SetSenderNumRequest, opts ...client.CallOption) (*SetSenderNumResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error)
	SetInterval(ctx context.Context, in *SetIntervalRequest, opts ...client.CallOption) (*SetIntervalResponse, error)
}

type senderService struct {
	c    client.Client
	name string
}

func NewSenderService(name string, c client.Client) SenderService {
	return &senderService{
		c:    c,
		name: name,
	}
}

func (c *senderService) SetSenderNum(ctx context.Context, in *SetSenderNumRequest, opts ...client.CallOption) (*SetSenderNumResponse, error) {
	req := c.c.NewRequest(c.name, "Sender.SetSenderNum", in)
	out := new(SetSenderNumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "Sender.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderService) SetInterval(ctx context.Context, in *SetIntervalRequest, opts ...client.CallOption) (*SetIntervalResponse, error) {
	req := c.c.NewRequest(c.name, "Sender.SetInterval", in)
	out := new(SetIntervalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sender service

type SenderHandler interface {
	SetSenderNum(context.Context, *SetSenderNumRequest, *SetSenderNumResponse) error
	Send(context.Context, *SendRequest, *SendResponse) error
	SetInterval(context.Context, *SetIntervalRequest, *SetIntervalResponse) error
}

func RegisterSenderHandler(s server.Server, hdlr SenderHandler, opts ...server.HandlerOption) error {
	type sender interface {
		SetSenderNum(ctx context.Context, in *SetSenderNumRequest, out *SetSenderNumResponse) error
		Send(ctx context.Context, in *SendRequest, out *SendResponse) error
		SetInterval(ctx context.Context, in *SetIntervalRequest, out *SetIntervalResponse) error
	}
	type Sender struct {
		sender
	}
	h := &senderHandler{hdlr}
	return s.Handle(s.NewHandler(&Sender{h}, opts...))
}

type senderHandler struct {
	SenderHandler
}

func (h *senderHandler) SetSenderNum(ctx context.Context, in *SetSenderNumRequest, out *SetSenderNumResponse) error {
	return h.SenderHandler.SetSenderNum(ctx, in, out)
}

func (h *senderHandler) Send(ctx context.Context, in *SendRequest, out *SendResponse) error {
	return h.SenderHandler.Send(ctx, in, out)
}

func (h *senderHandler) SetInterval(ctx context.Context, in *SetIntervalRequest, out *SetIntervalResponse) error {
	return h.SenderHandler.SetInterval(ctx, in, out)
}
